# -*- coding: utf-8 -*-
"""experiment4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18JVZx0FTTKugt1I4lGPtgbhF4Q9GTDF3
"""

import tensorflow as tf
from tensorflow.keras import layers, models, initializers
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt

(train_images, train_labels), (test_images, test_labels) = cifar10.load_data()

train_images = train_images / 255.0
test_images = test_images / 255.0

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

def create_model(activation="relu", dropout_rate=0.3, regularizer=None, initializer=None):
    model = models.Sequential([
        layers.Flatten(input_shape=(32, 32, 3)),
        layers.Dense(512, kernel_initializer=initializer, kernel_regularizer=regularizer, activation='relu'),
        layers.Dropout(dropout_rate),
        layers.Dense(256, kernel_initializer=initializer, kernel_regularizer=regularizer, activation='relu'),
        layers.Dropout(dropout_rate),
        layers.Dense(128, kernel_initializer=initializer, kernel_regularizer=regularizer, activation='relu'),
        layers.Dropout(dropout_rate),
        layers.Dense(64, kernel_initializer=initializer, kernel_regularizer=regularizer, activation='relu'),
        layers.Dropout(dropout_rate),
        layers.Dense(32, kernel_initializer=initializer, kernel_regularizer=regularizer, activation='relu'),
        layers.Dropout(dropout_rate),
        layers.Dense(10, activation='softmax')
    ])
    return model

xavier_initializer = initializers.glorot_normal()
kaiming_initializer = initializers.he_normal()
regularizer = tf.keras.regularizers.l2(0.001)

xavier_model = create_model(activation='sigmoid', regularizer=regularizer, initializer=xavier_initializer)
kaiming_model = create_model(activation='relu', regularizer=regularizer, initializer=kaiming_initializer)

xavier_model.compile(optimizer='adam',
                     loss='categorical_crossentropy',
                     metrics=['accuracy'])
kaiming_model.compile(optimizer='adam',
                      loss='categorical_crossentropy',
                      metrics=['accuracy'])

xavier_history = xavier_model.fit(train_images, train_labels, epochs=20, validation_data=(test_images, test_labels))
kaiming_history = kaiming_model.fit(train_images, train_labels, epochs=20, validation_data=(test_images, test_labels))

print("Xav_model Accuracy",xavier_model.evaluate(test_images,test_labels)[1])
print("Kai_model Accuracy",kaiming_model.evaluate(test_images,test_labels)[1])

xavier_model.summary()
kaiming_model.summary()

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(xavier_history.history['accuracy'], label='Xavier (train)')
plt.plot(xavier_history.history['val_accuracy'], label='Xavier (val)')
plt.title('Xavier Initialization')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.subplot(1, 2, 2)
plt.plot(kaiming_history.history['accuracy'], label='Kaiming (train)')
plt.plot(kaiming_history.history['val_accuracy'], label='Kaiming (val)')
plt.title('Kaiming Initialization')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.tight_layout()
plt.show()







